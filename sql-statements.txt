

Can user be connected to the auth_object_relation if he doesn' posses both experten codes? -> NO


-- Get only records where there is defined relationship between VERTICAL and 
-- HORIZONTAL authorization objects
  AND AO.AUTH_OBJECT_ID 
    IN (
      -- Select M relations
      SELECT DISTINCT AUTH_OBJECT_ID 
        FROM (
          SELECT AORM.AUTH_OBJ_ID_M AUTH_OBJECT_ID 
          FROM AUTH_OBJS_RELATIONS AORM
          WHERE 
            -- Only valid records
            AORM.V_IS_ACTIVE = 'T'
            AND AORM.V_VALID_FROM < SYSDATE
            AND AORM.V_VALID_TO >= SYSDATE
          
          UNION ALL
          
          SELECT AORN.AUTH_OBJ_ID_N AUTH_OBJECT_ID 
          FROM AUTH_OBJS_RELATIONS AORN
          WHERE 
            -- Only valid records
            AORN.V_IS_ACTIVE = 'T'
            AND AORN.V_VALID_FROM < SYSDATE
            AND AORN.V_VALID_TO >= SYSDATE
          ) AUTH_OBJECTS_RELATIONS
        )
      





-- search for the columns if exists
DECLARE
  v_column_exists number := 0;  
BEGIN
  Select count(*) into v_column_exists
    from user_tab_cols
    where column_name = 'ADD_TMS'
      and table_name = 'EMP';
      --and owner = 'SCOTT --*might be required if you are using all/dba views

  if (v_column_exists = 0) then
      execute immediate 'alter table emp add (ADD_TMS date)';
  end if;
end;
/


DBMS_RLS.ADD_POLICY
	

Adds a policy to a table, view, or synonym

DBMS_RLS.ENABLE_POLICY
	

Enables (or disables) a policy you previously added to a table, view, or synonym

DBMS_RLS.REFRESH_POLICY
	

Invalidates cursors associated with nonstatic policies

DBMS_RLS.DROP_POLICY
	

To drop a policy from a table, view, or synonym

For Handling Grouped Policies
	 

DBMS_RLS.CREATE_POLICY_GROUP
	

Creates a policy group

DBMS_RLS.DELETE_POLICY_GROUP
	

Drops a policy group

DBMS_RLS.ADD_GROUPED_POLICY
	

Adds a policy to the specified policy group

DBMS_RLS.ENABLE_GROUPED_POLICY
	

Enables a policy within a group

DBMS_RLS.REFRESH_GROUPED_POLICY
	

Parses again the SQL statements associated with a refreshed policy

DBMS_RLS.DISABLE_GROUPED_POLICY
	

Disables a policy within a group

DBMS_RLS.DROP_GROUPED_POLICY
	

Drops a policy that is a member of the specified group

For Handling Application Contexts
	 

DBMS_RLS.ADD_POLICY_CONTEXT
	

Adds the context for the active application

DBMS_RLS.DROP_POLICY_CONTEXT
	

Drops the context for the application




















        alter session enable parallel dml;
    merge /*+ parallel(contract_dim,10) append */
        into contract_dim d
        using TABLE(trx.go(
            CURSOR(select /*+ parallel(contracts_

file,10) full (contracts_file) */ *
                from contracts_file ))) f
        on  d.contract_id = f.contract_id
        when matched then
            update set desc              = f.desc,
                       init_val_loc_curr = f.init_val_loc_curr,
                       init_val_adj_amt  = f.init_val_adj_amt
        when not matched then
            insert values ( f.contract_id,
                            f.desc,
                            f.init_val_loc_curr,
                            f.init_val_adj_amt);  
                            
-- CHECK IF THERE WILL BE MORE THAN ONE POLICY OVER SINGLE OBJECT REQUIRED.                            

SELECT /*+ parallel(6) */
  AO.CODE AUTH_OBJ_CODE,
  S.NAME SCHEMA_NAME,
  O.NAME OBJECT_NAME,
  OC.NAME OBJECT_COLUMN_NAME,
  COUNT(*) AS COUNT
FROM AUTHORIZATION_OBJECTS AO
INNER JOIN OBJECTS O ON AO.AUTH_OBJECT_ID = O.AUTHORIZATION_OBJECT_ID
INNER JOIN SCHEMAS S ON O.SCHEMA_ID = S.SCHEMA_ID
INNER JOIN OBJECT_COLUMNS OC ON O.OBJECT_ID = OC.OBJECT_ID
WHERE 

  -- Get only valid records
  AO.V_IS_ACTIVE = 'T'
  AND AO.V_VALID_FROM < SYSDATE
  AND AO.V_VALID_TO >= SYSDATE
  AND S.V_IS_ACTIVE = 'T'
  AND S.V_VALID_FROM < SYSDATE
  AND S.V_VALID_TO >= SYSDATE
  AND O.V_IS_ACTIVE = 'T'
  AND O.V_VALID_FROM < SYSDATE
  AND O.V_VALID_TO >= SYSDATE
  AND OC.V_IS_ACTIVE = 'T'
  AND OC.V_VALID_FROM < SYSDATE
  AND OC.V_VALID_TO >= SYSDATE


  
-- BEGIN: For testing purposes only --
  -- AND O.NAME = '%%'
-- END: For testing purposes only --

GROUP BY AO.CODE,S.NAME,O.NAME,OC.NAME

ORDER BY COUNT DESC;


select * from user_objects where object_type = 'TABLE';






INSERT INTO F_SEC_ADMIN.OBJECTS (NAME,OBJECT_TYPE_ID, SCHEMA_ID, AUTHORIZATION_OBJECT_ID) VALUES ('PORTFOLIO_GROUPS_V',2,1,'842');



SELECT * FROM F_SEC_ADMIN.AUTHORIZATION_OBJECTS,F_SEC_ADMIN.OBJECTS;
WHERE AUTH_OBJ_TYPE_ID = 5;

select * from all_tab_columns
where column_name='OWNER_NUM'
AND OWNER='F_DWH_BL'
;



select table_name,column_name from all_tab_columns
where 
--column_name='OWNER_NUM'
OWNER='F_DWH_BL'
and table_name in(
'CUSTOMERS_V',
'CUSTOMER_SYSTEMATICS_V',
'CUST_PORT_ASSIGNMENTS_V',
'OWNERS_V',
'PORTFOLIOS_V',
'PORTFOLIO_ASSIGNMENTS_V',
'PORTFOLIO_FIGURES_DAILY_V',
'PORTFOLIO_FIGURES_DLY_HIST_V',
'PORTFOLIO_GROUPS_V',
'PORTFOLIO_HIST_V',
'PORTFOLIO_HOLDINGS_V',
'PORTFOLIO_HOLDING_CALCS_V',
'PORTFOLIO_HOLDING_CALCS_VV_V',
'PORTFOLIO_HOLDING_CALC_HIST_V',
'PORTFOLIO_HOLDING_HIST_V',
'PORTFOLIO_IDS_V',
'PORTFOLIO_ID_MAPPINGS_V',
'PORTFOLIO_TARGET_SYSTEMS_V',
'TRANSACTIONS_V',
'TRANSACTION_COSTS_V',
'TRANSACTION_COST_HIST_V',
'TRANSACTION_DETAILS_V',
'TRANSACTION_DETAIL_HIST_V',
'TRANSACTION_HIST_V');



sele


--- CREATE BL VIEWS
declare
l_schema varchar2(60) := 'F_DWH_BL';
l_statement varchar2(4000) := '';
CURSOR tab_cur 
  IS 
    SELECT table_name,REPLACE(table_name,'_TB','_V') as view_name
    FROM dba_tables WHERE owner='F_DWH_BL'
    AND table_name NOT IN ('ASSETS_TB_20140710','ASSET_ID_MAPPINGS_DUBS_HIST');
begin

FOR x IN tab_cur LOOP
l_statement :='CREATE OR REPLACE force VIEW ' || l_schema || '.' || x.view_name || ' AS SELECT * FROM F_DWH_BL.' || x.table_name;
DBMS_OUTPUT.PUT(l_statement);
EXECUTE IMMEDIATE l_statement;
EXECUTE IMMEDIATE 'GRANT SELECT ON '|| l_schema  || '.' ||x.view_name||' to '|| 'A88FS01,A88FS02,A88FS03,A88FS04';
--EXECUTE IMMEDIATE 'GRANT SELECT ON '||tables_schema||'.'||x.table_name||' to '||synonyms_schema;
--EXECUTE IMMEDIATE 'CREATE SYNONYM '||synonyms_schema||'.'||x.table_name||' FOR '||tables_schema||'.'||x.table_name;
END LOOP;
end;

SELECT table_name,REPLACE(table_name,'_TB','_V') as view_name
    FROM dba_tables WHERE owner='F_DWH_BL';


-- DROP BL VIEWS
declare
l_schema varchar2(60) := 'F_DWH_BL';
l_statement varchar2(4000) := '';
CURSOR tab_cur 
  IS 
    SELECT * FROM ALL_VIEWS WHERE owner='F_DWH_BL';
begin

FOR x IN tab_cur LOOP
l_statement :='DROP VIEW ' || l_schema || '.' || x.view_name ;
DBMS_OUTPUT.PUT(l_statement);
EXECUTE IMMEDIATE l_statement;
--EXECUTE IMMEDIATE 'GRANT SELECT ON '|| l_schema  || '.' ||x.view_name||' to '|| 's9073';
--EXECUTE IMMEDIATE 'GRANT SELECT ON '||tables_schema||'.'||x.table_name||' to '||synonyms_schema;
--EXECUTE IMMEDIATE 'CREATE SYNONYM '||synonyms_schema||'.'||x.table_name||' FOR '||tables_schema||'.'||x.table_name;
END LOOP;
end;






-- EOS part, because the sequence and trigger must be created
-- Initial static constants.

-- Generator

-- VPD Groups
SELECT *
FROM AUTHORIZATION_OBJECTS
WHERE 
V_IS_DELETED

-- VPD POLICIES
SELECT OBJECT_SCHEMA
OBJECT_NAME
POLICY_NAME
FUNCTION_SCHEMA
POLICY_FUNCTION
STATEMENT_TYPES
UPDATE_CHECK
ENABLE
STATIC_POLICY
LONG_PREDICATE
SEC_RELEVANT_COLS
SEC_RELEVANT_COLS_OPT
V_IS_DELETED
V_VALID_FROM
V_VALID_TO
VPD_POLICY_TYPE_ID
VPD_POLICY_GROUP_ID







